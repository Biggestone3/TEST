name: Merge, Build, and Deploy Azure Function - CRAWLER

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**' 
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_NAME: 'CRAWLER1'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: 'backend/deploy-function-app'
  PYTHON_VERSION: '3.11'

jobs:
  prepare-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create temporary deployment branch
        run: git checkout -b temp-deploy-branch

      - name: Set up Python and Poetry
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry & Plugin
        run: |
          pip install poetry
          poetry self add poetry-plugin-export

      - name: Create deployment directory
        run: |
          rm -rf ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          mkdir -p ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

      - name: Merge Python files into function_app.py
        run: |
          echo -e "# === TYPES ===" > ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/function_app.py
          cat backend/lna-db/lna_db/core/types.py >> ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/function_app.py

          echo -e "\n\n# === MODELS ===" >> ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/function_app.py
          cat backend/lna-db/lna_db/models/news.py >> ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/function_app.py

          echo -e "\n\n# === CRAWLER LOGIC ===" >> ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/function_app.py
          cat backend/lna-crawlers/lna_crawlers/Crawler.py >> ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/function_app.py

          sed -i '/^from lna_db/d' ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/function_app.py

      - name: Generate Combined Requirements.txt
        run: |
          rm -f requirements.txt
          for pyproject in $(find backend -name "pyproject.toml"); do
            dir=$(dirname "$pyproject")
            echo "Processing $dir"
            cd "$dir"
            poetry export --without-hashes --format=requirements.txt --output=requirements.txt --with dev | \
              sed 's/ ; python_version.*//' > requirements.txt
            cd - > /dev/null
            cat "$dir/requirements.txt" >> requirements.txt
            echo "" >> requirements.txt
          done
          sed -i '/^-e /d' requirements.txt
          sed -i '/^\.\.\?\//d' requirements.txt
          sed -i 's/ ;.*//' requirements.txt
          awk -F '==' '{print $1}' requirements.txt | sort -u > temp.txt
          mv temp.txt ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/requirements.txt

      - name: Create host.json
        run: |
          cat <<EOF > ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/host.json
          {
            "version": "2.0",
            "logging": {
              "applicationInsights": {
                "samplingSettings": {
                  "isEnabled": true,
                  "excludedTypes": "Request"
                }
              }
            },
            "extensionBundle": {
              "id": "Microsoft.Azure.Functions.ExtensionBundle",
              "version": "[4.*, 5.0.0)"
            }
          }
          EOF

      - name: Zip the Azure Function app
        run: |
          cd ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          zip -r ../function_app.zip .

      - name: Deploy to Azure Function App
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          package: backend/function_app.zip
          publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
          scm-do-build-during-deployment: true
          enable-oryx-build: true

      - name: Cleanup temporary deployment branch
        if: always()
        run: |
          git checkout main
          git branch -D temp-deploy-branch
